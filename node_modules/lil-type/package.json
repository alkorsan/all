{
  "name": "lil-type",
  "description": "Reliable, full featured, type checking helpers",
  "version": "0.1.0",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/lil-js/type"
  },
  "author": {
    "name": "Tomas Aparicio"
  },
  "main": "./type.js",
  "keywords": [
    "lil",
    "tiny",
    "micro",
    "type",
    "checking",
    "lodash",
    "underscore",
    "isType",
    "typing",
    "coercion"
  ],
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "browserify": "^5.9.1",
    "chai": "^1.9.1",
    "mocha": "^1.21.3",
    "mocha-phantomjs": "^3.4.1",
    "phantomjs": "^1.9.7-9",
    "uglify-js": "^2.4.15"
  },
  "readme": "# [lil](http://lil-js.github.io)'-type [![Build Status](https://api.travis-ci.org/lil-js/type.svg?branch=master)][travis] ![Stories in Ready](https://badge.waffle.io/lil-js/type.png?label=ready&title=Ready)](https://waffle.io/lil-js/type)  [![Gitter chat](https://badges.gitter.im/lil-js/type.png)](https://gitter.im/lil-js/type)\n\n<img align=\"center\" height=\"150\" src=\"http://lil-js.github.io/img/liljs-logo.png\" />\n\nReliable, full featured, type checking helpers (based on [hu](https://github.com/h2non/hu))\n\n<table>\n<tr>\n<td><b>Name</b></td><td>type</td>\n</tr>\n<tr>\n<td><b>Version</b></td><td>0.1.0</td>\n</tr>\n<tr>\n<td><b>Size</b></td><td>2 KB / >1 KB (gzipped)</td>\n</tr>\n<tr>\n<td><b>Environment</b></td><td>Node, Browser</td>\n</tr>\n</table>\n\n## Features\n\n- Full type-checking support\n- Support upcoming ES6 data types (generators, promises, maps...)\n- Support for binary data types (Blob, File, FileReader...)\n- Support for buffer data types (ArrayBuffer, DataView...)\n- Support for typed arrays (Int8Array, Float32Array...)\n- Smart type inference\n\n## Installation\n\n#### Node.js\n```bash\nnpm install lil-type\n```\n\n#### Browser\nVia [Bower](http://bower.io)\n```bash\nbower install lil-type\n```\nVia [Component](https://github.com/componentjs/component)\n```bash\ncomponent install lil-js/type\n```\nOr loading the script remotely\n```html\n<script src=\"//cdn.rawgit.com/lil-js/type/0.1.0/type.js\"></script>\n```\n\n### Environments\n\n- Node.js\n- Chrome >= 5\n- Firefox >= 3\n- Safari >= 5\n- Opera >= 10\n- IE >= 9\n\n### Usage\n\nYou could fetch de module via `require()` if it's available.\nOtherwise, global fallback will be used, exposed via `lil.type`\n```js\nvar lil = require('lil-type')\n```\n\n##### Type checking\n```js\nlil.isObject({}) // -> true\nlil.isArray([1,2,3]) // -> true\nlil.isNumber(1.2) // -> true\nlil.isBool(1.2) // -> true\nlil.isRegExp(/[a-z]/) // -> true\n```\n\n##### Content checking\n```js\nlil.isEmpty(void 0) // -> true\nlil.isEmpty('') // -> true\nlil.isEmpty([]) // -> true\nlil.isEmpty({}) // -> true\nlil.isEmpty(1.5) // -> false\nlil.isEmpty(new Date) // -> false\n```\n\n##### Getting data type\n```js\nlil.is('name') // -> 'string'\nlil.is({}) // -> 'object'\nlil.is([1]) // -> 'array'\nlil.is(/[a-z]/) // -> 'regexp'\nlil.is(function () {}) // -> 'function'\nlil.is(void 0) // -> 'undefined'\n```\n\n##### Type handle helpers\n```js\nlil.isIterable([1,2,3]) // -> true\nlil.isIterable({ name: 'Chuck' }) // -> true\nlil.isIterable(function () {}) // -> false\nlil.isIterable(true) // -> false\nlil.isMutable({}) // -> true\nlil.isMutable([]) // -> true\nlil.isMutable('') // -> false\nlil.isMutable(/[a-z]/) // -> false\n```\n\n## API\n\n#### lil.isBool(o)\nAlias: `isBoolean`\n\n#### lil.isNumber(o)\n\n#### lil.isNaN(o)\n\n#### lil.isFinite(o)\n\n#### lil.isString(o)\n\n#### lil.isDate(o)\n\n#### lil.isRegExp(o)\n\n#### lil.isError(o)\n\n#### lil.isFn(o)\nAlias: `isFunction`\n\n#### lil.isArguments(o)\n\n#### lil.isSymbol(o)\n\n#### lil.isArray(o)\n\n#### lil.isObject(o)\n\n#### lil.isPlainObject(o)\n\n#### lil.isElement(o)\n\n#### lil.isNull(o)\n\n#### lil.isUndefined(o)\n\n#### lil.isPromise(o)\n\n#### lil.isGenerator(o)\n\n#### lil.isMap(o)\n\n#### lil.isBinary(o)\n\n#### lil.isBlob(o)\n\n#### lil.isFile(o)\n\n#### lil.isBuffer(o)\n\n#### lil.isEmpty(o)\n\n#### lil.notEmpty(o)\n\n#### lil.isIterable(o)\n\n#### lil.isPrimitive(o)\n\n#### lil.isMutable(o)\n\n#### lil.is(o)\nAlias: `isType`\n\n#### lil.type.VERSION\n\n## Contributing\n\nWanna help? Cool! It will be appreciated :)\n\nYou must add new test cases for any new feature or refactor you do,\nalways following the same design/code patterns that already exist\n\n### Development\n\nOnly [node.js](http://nodejs.org) is required for development\n\nClone the repository\n```bash\n$ git clone https://github.com/lil-js/type.git && cd type\n```\n\nInstall dependencies\n```bash\n$ npm install\n```\n\nGenerate browser bundle source\n```bash\n$ make browser\n```\n\nRun tests\n```bash\n$ make test\n```\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) Â© Tomas Aparicio\n\n[travis]: http://travis-ci.org/lil-js/type\n",
  "readmeFilename": "README.md",
  "gitHead": "5e3753ee649d2fb0f615ba60e6d56c6fad388dbd",
  "bugs": {
    "url": "https://github.com/lil-js/type/issues"
  },
  "homepage": "https://github.com/lil-js/type",
  "_id": "lil-type@0.1.0",
  "_shasum": "f15b33c9dfa837ede1ff8816edf9fcba70056833",
  "_from": "lil-type@^0.1.0"
}
